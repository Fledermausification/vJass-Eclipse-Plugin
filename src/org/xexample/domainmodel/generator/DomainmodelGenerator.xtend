/*
 * generated by Xtext
 */
package org.xexample.domainmodel.generator

import javax.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.xexample.domainmodel.domainmodel.Function
import org.xexample.domainmodel.domainmodel.FunctionArgument
import org.xexample.domainmodel.domainmodel.FunctionCall
import org.xexample.domainmodel.domainmodel.GlobalVariable
import org.xexample.domainmodel.domainmodel.LocalVariable

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class DomainmodelGenerator implements IGenerator {
	@Inject extension IQualifiedNameProvider
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		//Variables
		for (e : resource.allContents.toIterable.filter(GlobalVariable)) {
			fsa.generateFile(
                e.fullyQualifiedName.toString("/") + ".java",
                e.compile)
		}
		
		for (e : resource.allContents.toIterable.filter(LocalVariable)) {
			fsa.generateFile(
                e.fullyQualifiedName.toString("/") + ".java",
                e.compile)
		}
		
		for (e : resource.allContents.toIterable.filter(FunctionCall)) {
			fsa.generateFile(
                e.fullyQualifiedName.toString("/") + ".java",
                e.compile)
		}
		
		for (e : resource.allContents.toIterable.filter(FunctionArgument)) {
			fsa.generateFile(
                e.fullyQualifiedName.toString("/") + ".java",
                e.compile)
		}
		
		//Functions
		for (e : resource.allContents.toIterable.filter(Function)) {
			fsa.generateFile(
                e.fullyQualifiedName.toString("/") + ".java",
                e.compile)
		}
	}
	
	def compile(GlobalVariable g) '''
		public class «g.name» {
			
		}
	'''
	
	def compile(LocalVariable l) '''
		public class «l.name» {
			
		}
	'''
	
	def compile(FunctionCall f) '''
		public class «f.name» {
			
		}
	'''
	
	def compile(FunctionArgument f) '''
		public class «f.name» {
			
		}
	'''
	
	def compile(Function f) '''
		public class «f.name» {
			
		}
	'''
}